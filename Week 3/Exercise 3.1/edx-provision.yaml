AWSTemplateFormatVersion: 2010-09-09

Description: "Exercise 3.1 - CloudFormation - Create RDS and VPC"

Parameters:
  DBAllocatedStorage:
    Default: '5'
    Description: "The size of the database (Gb)"
    Type: Number
    MinValue: '5'
    MaxValue: '1024'
    ConstraintDescription: "Must be between 5 and 1024Gb."
  DBInstanceClass:
    Default: db.t2.micro
    Description: "The database instance type"
    Type: String
    AllowedValues:
      - db.t2.micro
    ConstraintDescription: "Must select a valid database instance type."
  DBInstanceMasterPassword:
    NoEcho: true
    Description: The database admin account password
    Type: String
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-ebs'    
    # Type: String
    # Default: ami-02c6024b3d5467e4a
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: Test VPC

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    DependsOn: VPC
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    DependsOn:
      - VPC
      - InternetGateway
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select 
        - '0'
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: Public Subnet 1

  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select 
        - '1'
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: Public Subnet 2

  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select 
        - '0'
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: Private Subnet 1

  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select 
        - '1'
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: Private Subnet 2

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    DependsOn:
      - VPC
      - AttachGateway
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route Table
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn:
      - VPC
      - PublicRouteTable
      - InternetGateway
      - AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - PublicRouteTable
      - PublicSubnet1
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - PublicRouteTable
      - PublicSubnet2
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Route Table

  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - PublicRouteTable
      - PrivateSubnet1
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - PublicRouteTable
      - PrivateSubnet2
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  WebSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn: VPC
    Properties:
      GroupDescription: Enable HTTP access
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: TEST-Web-Security-Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0

  DBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn:
      - VPC
      - WebSecurityGroup
    Properties:
      GroupDescription: DB Instance Security Group
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: TEST-DB-Security-Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref WebSecurityGroup

  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    DependsOn:
      - PrivateSubnet1
      - PrivateSubnet2
    Properties:
      DBSubnetGroupDescription: Lab DB Subnet Group
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  LabDBInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      AllocatedStorage: !Ref DBAllocatedStorage
      DBInstanceClass: !Ref DBInstanceClass
      Engine: MySQL
      MasterUsername: root
      MasterUserPassword: !Ref DBInstanceMasterPassword
      MultiAZ: 'false'
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      Tags:
        - Key: Name
          Value: TEST-DBInstance

  CodeDeployRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "codedeploy.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
      Path: "/"

  Application:
    Type: 'AWS::CodeDeploy::Application'
    Properties:
      ApplicationName: 'TESTApplication'

  DeploymentConfig:
    Type: 'AWS::CodeDeploy::DeploymentConfig'
    Properties:
      MinimumHealthyHosts:
        Type: HOST_COUNT
        Value: '0'

  DeploymentGroup:
    Type: 'AWS::CodeDeploy::DeploymentGroup'
    Properties:
      ApplicationName: !Ref Application
      DeploymentConfigName: !Ref DeploymentConfig
      DeploymentGroupName: 'TESTDeploymentGroup'
      Ec2TagFilters:
        - Key: CodeDeployInstance
          Value: TESTWebServer
          Type: KEY_AND_VALUE
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn

  RootRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy
        - arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess

  RootInstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - 
          Ref: "RootRole"
  WebServerInstance:
    Type: "AWS::EC2::Instance"
    Properties: 
      IamInstanceProfile: !Ref RootInstanceProfile
      ImageId: !Ref LatestAmiId
      InstanceType: t2.micro
      NetworkInterfaces:
        - DeviceIndex: '0'
          AssociatePublicIpAddress: 'true'
          SubnetId: !Ref PublicSubnet1
          GroupSet:
            - !Ref WebSecurityGroup
      Tags:
        - Key: Name
          Value: "TEST-WebServerInstance"
        - Key: CodeDeployInstance
          Value: "TESTWebServer"
        - Key: Owner
          Value: "RANDOMCODE"          
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            yum update -y aws-cfn-bootstrap
            aws configure set default.region ${AWS::Region}
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerInstance --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServerInstance --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: 'PT5M'
    Metadata:
      AWS::CloudFormation::Init: 
        config: 
          packages: 
            yum: 
              nginx: []
              ruby: []
              wget: []
              python36: []
              python36-devel: []
              gcc: []
              mysql: []
          commands: 
            01_get_cd: 
              command: "wget https://aws-codedeploy-us-west-2.s3.amazonaws.com/latest/install"
              cwd: "/tmp"
            02_install_cd: 
              command: "chmod +x install && ./install auto"
              cwd: "/tmp"
            03_install_uwsgi: 
              command: "pip-3.6 install uwsgi"
          services: 
            sysvinit: 
              nginx: 
                enabled: "true"
                ensureRunning: "true"
                files: 
                  - "/etc/nginx/nginx.conf"
                sources: 
                  - "/var/www/html"


Outputs:

  RDSAddress:
    Description: The hostname for the RDS instance
    Value: !GetAtt LabDBInstance.Endpoint.Address

  TESTWebServerInstanceId:
    Description: The TESTWebServer InstanceId Id
    Value: !Ref WebServerInstance



