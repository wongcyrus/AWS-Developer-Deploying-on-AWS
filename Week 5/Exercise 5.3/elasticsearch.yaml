AWSTemplateFormatVersion: 2010-09-09
Description: ElasticsearchDomain resource
Parameters:
  SourceBucket:
    Type: String
Resources:
  ElasticsearchDomain:
    Type: AWS::Elasticsearch::Domain
    Properties:
      DomainName: application-logs
      ElasticsearchClusterConfig:
        InstanceCount: '1'
        InstanceType: t2.small.elasticsearch
      EBSOptions:
        EBSEnabled: 'true'
        Iops: 0
        VolumeSize: 10
        VolumeType: gp2
      SnapshotOptions:
        AutomatedSnapshotStartHour: '0'
      AccessPolicies:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
              - "*"
            Action:
            - es:*
            Resource: !Sub arn:aws:es:{AWS::Region}:{AWS::AccountId}:domain/application-logs/*
        
  LogStreamerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Sub logstreamer-${AWS::Region}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
            - Effect: Allow
              Action:
              - es:ESHttpPost
              Resource: !GetAtt ElasticsearchDomain.DomainArn

  LogStreamer:
    Type: AWS::Lambda::Function
    Properties:
      Description: Centralized Logging - Lambda function to stream logs on ES Domain
      Handler: index.handler
      Role: !Sub ${LogStreamerRole.Arn}
      Environment:
        Variables:
          DomainEndpoint: !GetAtt ElasticsearchDomain.DomainEndpoint
      Code:
        S3Bucket: !Ref SourceBucket
        S3Key: code.zip
      Runtime: "nodejs8.10"
      Timeout: 300

  LogStreamerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Sub ${LogStreamer}
      Action: lambda:InvokeFunction
      Principal: !Sub logs.${AWS::Region}.amazonaws.com
      SourceAccount: !Sub ${AWS::AccountId}            

  SubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    DependsOn: LogStreamerInvokePermission
    Properties:
      DestinationArn:
        Fn::GetAtt:
        - LogStreamer
        - Arn
      FilterPattern: "[remote_addr, delimiter, remote_user, timestamp, request, status, body_bytes_sent, http_referrer, http_user_agent, http_x_forwarded_for]"
      LogGroupName:
        Ref: LogGroup

  LogGroup: 
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: FlaskApp-Frontends-access-log
      RetentionInDays: 7        
Outputs:
  DomainArn:
    Value: !GetAtt ElasticsearchDomain.DomainArn
  DomainEndpoint:
    Value: !GetAtt ElasticsearchDomain.DomainEndpoint